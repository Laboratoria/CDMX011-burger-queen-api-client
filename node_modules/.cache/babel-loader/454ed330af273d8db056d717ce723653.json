{"ast":null,"code":"import axios from \"axios\";\nimport { Button } from \"@mui/material\";\nimport ReactDOM from 'react-dom';\nimport React from \"react\";\nconst array = [];\n\nfunction validate(result) {\n  return new Promise((resolve, reject) => {\n    result.forEach(element => {\n      array.push(axiosValidate(element));\n    });\n    resolve(Promise.all(array));\n    reject(new Error('No se obtuvo informacion de los links'));\n  });\n}\n\nasync function axiosValidate() {\n  return await axios.get(' http://localhost:4000/products').then(response => ({\n    name: response.data.name\n  })).catch(error => ({}));\n}\n\nexport default validate;","map":{"version":3,"sources":["/home/anita/CDMX011-burger-queen-api-client/burguerqueen/src/axios.js"],"names":["axios","Button","ReactDOM","React","array","validate","result","Promise","resolve","reject","forEach","element","push","axiosValidate","all","Error","get","then","response","name","data","catch","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,KAAK,GAAG,EAAd;;AAEA,SAASC,QAAT,CAAkBC,MAAlB,EAA0B;AACzB,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvCH,IAAAA,MAAM,CAACI,OAAP,CAAeC,OAAO,IAAI;AACzBP,MAAAA,KAAK,CAACQ,IAAN,CAAWC,aAAa,CAACF,OAAD,CAAxB;AACA,KAFD;AAGAH,IAAAA,OAAO,CAACD,OAAO,CAACO,GAAR,CAAYV,KAAZ,CAAD,CAAP;AACAK,IAAAA,MAAM,CAAC,IAAIM,KAAJ,CAAU,uCAAV,CAAD,CAAN;AACA,GANM,CAAP;AAOA;;AAED,eAAeF,aAAf,GAA+B;AAC9B,SAAO,MAAMb,KAAK,CAACgB,GAAN,CAAU,iCAAV,EACXC,IADW,CACNC,QAAQ,KAAK;AAClBC,IAAAA,IAAI,EAAED,QAAQ,CAACE,IAAT,CAAcD;AADF,GAAL,CADF,EAKXE,KALW,CAKLC,KAAK,KAAK,EAAL,CALA,CAAb;AAQA;;AACD,eAAejB,QAAf","sourcesContent":["import axios from \"axios\";\nimport { Button } from \"@mui/material\";\nimport ReactDOM from 'react-dom';\nimport React from \"react\";\n\nconst array = [];\n\nfunction validate(result) {\n\treturn new Promise((resolve, reject) => {\n\t\tresult.forEach(element => {\n\t\t\tarray.push(axiosValidate(element));\n\t\t});\n\t\tresolve(Promise.all(array));\n\t\treject(new Error('No se obtuvo informacion de los links'));\n\t});\n}\n\nasync function axiosValidate() {\n\treturn await axios.get(' http://localhost:4000/products')\n\t\t.then(response => ({\n\t\t\tname: response.data.name,\n\t\t\n\t\t}))\n\t\t.catch(error => ({\n\t\t\t\n\t\t}));\n}\nexport default validate;\n"]},"metadata":{},"sourceType":"module"}